package com.golden.ms.controllers;

import com.golden.ms.controllers.model.AddUserRequest;
import com.golden.ms.controllers.model.UpdateUserRequest;
import com.golden.ms.exceptions.model.*;
import com.golden.ms.model.User;
import com.golden.ms.service.UserManagementService;
import com.golden.ms.utils.CodeUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;

import static com.golden.ms.controllers.model.Constants.ATTRIBUTE_USER;
import static com.golden.ms.model.Constants.ROLE_ADMIN;

@RestController
@RequestMapping("/admin")
public class AdminController {
    @Autowired
    protected UserManagementService userManagementService;

    @PostMapping("/addUser")
    public ResponseEntity<String> addUser(HttpSession session, @RequestBody AddUserRequest request){
        User user = (User)session.getAttribute(ATTRIBUTE_USER);

        if (!user.getRole().equals(ROLE_ADMIN)) {
            throw new ForbiddenException(String.format("User %s does not have permission to perform add user", user.getAccountName()));
        }

        if (userManagementService.getUser(request.getUserId()) != null) {
            throw new AlreadyExistException(String.format("User with user id %d already exist", request.getUserId()));
        }

        // Normally userId should not be given by user, instead generated by database using uuid or incremental id
        if (request.getUserId() <= 0) {
            throw new BadRequestException(String.format("userId is missing"));
        }

        if (!StringUtils.hasText(request.getAccountName())){
            throw new BadRequestException(String.format("accountName is missing"));
        }

        // Can be empty but cannot be null
        if (request.getEndpoints() == null) {
            throw new BadRequestException(String.format("endPoints is missing"));
        }


        userManagementService.addUser(request);

        return ResponseEntity.status(HttpStatus.CREATED).body(CodeUtils.serializeSuccessResponse(HttpStatus.CREATED, userManagementService.getUser(request.getUserId())));
    }

    // This method is added for some test purpose
    // This is a full version of update, partial update can be written if it is required
    @PutMapping("/updateUser/{userId}")
    public ResponseEntity<String> updateUser(HttpSession session, @PathVariable("userId") int userId, @RequestBody UpdateUserRequest request){
        User user = (User)session.getAttribute(ATTRIBUTE_USER);

        if (!user.getRole().equals(ROLE_ADMIN)) {
            throw new ForbiddenException(String.format("User %s does not have permission to perform update user", user.getAccountName()));
        }

        if (userManagementService.getUser(userId) == null) {
            throw new NotFoundException(String.format("User with user id %d is not found", userId));
        }

        if (!StringUtils.hasText(request.getAccountName())){
            throw new BadRequestException(String.format("accountName is missing"));
        }

        // Can be empty but cannot be null
        if (request.getEndpoints() == null) {
            throw new BadRequestException(String.format("endpoints is missing"));
        }

        userManagementService.updateUser(userId, request);

        return ResponseEntity.status(HttpStatus.OK).body(CodeUtils.serializeSuccessResponse(HttpStatus.CREATED, userManagementService.getUser(userId)));
    }
}
